// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "calc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protorpc {

namespace {

const ::google::protobuf::Descriptor* CalcParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalcParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalcResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalcResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_calc_2eproto() {
  protobuf_AddDesc_calc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "calc.proto");
  GOOGLE_CHECK(file != NULL);
  CalcParam_descriptor_ = file->message_type(0);
  static const int CalcParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalcParam, num_),
  };
  CalcParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalcParam_descriptor_,
      CalcParam::default_instance_,
      CalcParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalcParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalcParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalcParam));
  CalcResult_descriptor_ = file->message_type(1);
  static const int CalcResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalcResult, num_),
  };
  CalcResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalcResult_descriptor_,
      CalcResult::default_instance_,
      CalcResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalcResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalcResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalcResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_calc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalcParam_descriptor_, &CalcParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalcResult_descriptor_, &CalcResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_calc_2eproto() {
  delete CalcParam::default_instance_;
  delete CalcParam_reflection_;
  delete CalcResult::default_instance_;
  delete CalcResult_reflection_;
}

void protobuf_AddDesc_calc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ncalc.proto\022\010protorpc\"\030\n\tCalcParam\022\013\n\003n"
    "um\030\001 \001(\003\"\031\n\nCalcResult\022\013\n\003num\030\001 \001(\003", 75);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "calc.proto", &protobuf_RegisterTypes);
  CalcParam::default_instance_ = new CalcParam();
  CalcResult::default_instance_ = new CalcResult();
  CalcParam::default_instance_->InitAsDefaultInstance();
  CalcResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_calc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_calc_2eproto {
  StaticDescriptorInitializer_calc_2eproto() {
    protobuf_AddDesc_calc_2eproto();
  }
} static_descriptor_initializer_calc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CalcParam::kNumFieldNumber;
#endif  // !_MSC_VER

CalcParam::CalcParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CalcParam::InitAsDefaultInstance() {
}

CalcParam::CalcParam(const CalcParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CalcParam::SharedCtor() {
  _cached_size_ = 0;
  num_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalcParam::~CalcParam() {
  SharedDtor();
}

void CalcParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CalcParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalcParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalcParam_descriptor_;
}

const CalcParam& CalcParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_calc_2eproto();
  return *default_instance_;
}

CalcParam* CalcParam::default_instance_ = NULL;

CalcParam* CalcParam::New() const {
  return new CalcParam;
}

void CalcParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalcParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CalcParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CalcParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CalcParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalcParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalcParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalcParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalcParam::MergeFrom(const CalcParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalcParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalcParam::CopyFrom(const CalcParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalcParam::IsInitialized() const {

  return true;
}

void CalcParam::Swap(CalcParam* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalcParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalcParam_descriptor_;
  metadata.reflection = CalcParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CalcResult::kNumFieldNumber;
#endif  // !_MSC_VER

CalcResult::CalcResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CalcResult::InitAsDefaultInstance() {
}

CalcResult::CalcResult(const CalcResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CalcResult::SharedCtor() {
  _cached_size_ = 0;
  num_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalcResult::~CalcResult() {
  SharedDtor();
}

void CalcResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CalcResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalcResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalcResult_descriptor_;
}

const CalcResult& CalcResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_calc_2eproto();
  return *default_instance_;
}

CalcResult* CalcResult::default_instance_ = NULL;

CalcResult* CalcResult::New() const {
  return new CalcResult;
}

void CalcResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalcResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CalcResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CalcResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CalcResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalcResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalcResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalcResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalcResult::MergeFrom(const CalcResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalcResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalcResult::CopyFrom(const CalcResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalcResult::IsInitialized() const {

  return true;
}

void CalcResult::Swap(CalcResult* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalcResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalcResult_descriptor_;
  metadata.reflection = CalcResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protorpc

// @@protoc_insertion_point(global_scope)
